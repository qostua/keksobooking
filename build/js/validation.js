class CustomValidation{constructor(i){this.invalidities=[],this.validityChecks=i}addInvalidity(i){this.invalidities.push(i)}getInvalidities(){return this.invalidities.join(". \n")}checkValidity(i){this.validityChecks.forEach((t=>{const a=t.getInvalidityMessage(i);""!==a&&this.addInvalidity(a)}))}}const resetValidityInput=i=>{i.CustomValidation&&(i.CustomValidation.invalidities=[],i.classList.remove("invalid"),i.setCustomValidity(""))},checkInput=i=>{if(i.CustomValidation){if(resetValidityInput(i),i.CustomValidation.checkValidity(i),0!==i.CustomValidation.invalidities.length||""===i.value){const t=i.CustomValidation.getInvalidities();i.setCustomValidity(t),i.classList.add("invalid")}i.reportValidity()}};export{CustomValidation,resetValidityInput,checkInput};